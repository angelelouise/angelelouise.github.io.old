= App Motion Detect, Canny e Pontilhismo
:Author:    Angele Louise
:Email:     <angelealst@hotmail.com>
:toc: left

== Motion Detect

Utilizando a biblioteca OpenCV para android, o app basicamente pega o frame anterior e o atual e aplica Correlação, se esta correlação for menor que um limite pré definido é retornado a camera preview em Grayscale, caso contrário é retornado a preview normal.
No código quando o if que testa a correlação é verdadeiro uma thread é criada e essa thread passa o preview em grayscale.

== Canny e Pontilhismo
Utilizando a matriz em grayscale, primeiro aplica-se Canny armazenando o resultado na matriz borders, nesse exemplo o pontilhismo está no contorno, ao invés de escrever uma linha o app escreve pequenos circulos utilizando do fundo branco.
Para obter no preview Canny é necessário retornar a matriz **borders**, para obter o pontilhismo retorna-se a matriz **points**.

=== onCameraFrame

[source,JAVA]
------
    public Mat onCameraFrame(CvCameraViewFrame inputFrame) {

        // TODO Auto-generated method stub
        mRgba = inputFrame.rgba();
        mGray = inputFrame.gray();
        Mat borders = new Mat();
        /*na primeira vez que o programa roda a imagem anterior está vazia*/
        if(first){
            mRgba_anterior = mRgba.clone();
            first = false;
            Log.i("First processing", "teste");
        }

        col = comp_histogramas(hist0,hist1, mRgba, mRgba_anterior);
        if(col<limite){
            Imgproc.putText(mRgba,"ALTERACAO DE VIDEO", new Point(30,50),1, 3, new Scalar(255));
            tag=true;
            mHandler.post(DoImageProcessing);

        }
        else{
            tag=false;
        }
        mRgba_anterior = mRgba.clone();
        if(menu.getTag()==3){

            Mat gray = new Mat(height, width, CV_8U, new Scalar(255));
            mRgba.channels();
            List<MatOfPoint> contornos = new ArrayList<MatOfPoint>();
            Mat hierarchy = new Mat();
            borders = new Mat(height, width, CV_8U, new Scalar(255));
            Mat points = new Mat(height, width, CV_8U, new Scalar(255));
            Imgproc.putText(mRgba,"filtro 2", new Point(30,50),1, 2, new Scalar(255));
            Imgproc.Canny(mGray, borders, 80, 100);
            //Imgproc.cvtColor(borders, gray, Imgproc.COLOR_RGBA2GRAY);
            Imgproc.findContours(borders, contornos, hierarchy, Imgproc.RETR_TREE, Imgproc.CHAIN_APPROX_SIMPLE);

            /*for (int contourIdx = 0; contourIdx < contornos.size(); contourIdx++) {
                Imgproc.drawContours(mRgba, contornos, contourIdx, new Scalar(0, 0, 255), -1);
            }*/
            hierarchy.release();
            //desenhando os círculos
            for(int i = 0; i< contornos.size(); i++) {
                for (int j = 0; j< contornos.get(i).toArray().length; j++) {
                    Point[] aux= contornos.get(i).toArray();
                    double[] xgray = mRgba.get(i,j);
                    System.out.println(aux);
                    Imgproc.circle(points, new Point(aux[j].x, aux[j].y),1, new Scalar(0,255,0));
                }
            }
            return points;

        }
        return mRgba;
    }

------
=== Correlação

[source,JAVA]
-----
	 public double comp_histogramas (Mat hist0, Mat hist1, Mat mRgba, Mat mRgba_anterior){
        double correlacao;
        Imgproc.calcHist(Arrays.asList(mRgba), new MatOfInt(0,1), new Mat(), hist0, histSize, ranges);
        Imgproc.calcHist(Arrays.asList(mRgba_anterior), new MatOfInt(0,1), new Mat(), hist1, histSize, ranges);
        Core.normalize(hist0, hist0, 0, 1, Core.NORM_MINMAX, -1, new Mat());
        Core.normalize(hist1, hist1, 0, 1, Core.NORM_MINMAX, -1, new Mat());

        correlacao = Imgproc.compareHist(hist0, hist1, Imgproc.CV_COMP_CORREL);
        return correlacao;
    }
-----

=== Thread

[source,JAVA]
-----------
	public Mat Mythread(Mat mRgba, Mat mGray, int height, int width){
        if(menu.getTag()==1) {
            return hist.filtro(mRgba);
        }
        if(menu.getTag()==2) {
            return hist.pontilhismo(mRgba, mGray, height, width);
        }

        return mRgba;
    }
	private Runnable DoImageProcessing = new Runnable()
    {
        public void run()
        {
            Log.i("RealTimeImageProcessing", "DoImageProcessing():");
            //bProcessing = true;
            mRgba = Mythread(mRgba, mGray, height, width);
            //bProcessing = false;
        }
    };
    
-----------

=== Método chamado pela thread

[source,JAVA]
---------
public Mat filtro (Mat mRgba){
        mat_alterada = new Mat();
        this.mRgba = mRgba;
        //Imgproc.blur(mRgba,mat_alterada,new Size(5,5));
        Imgproc.cvtColor(mRgba, mat_alterada, Imgproc.COLOR_RGBA2GRAY);
        //Imgproc.putText(mRgba,"filtro 1", new Point(30,50),1, 2, new Scalar(255));
        return mat_alterada;
    }
---------
.pontilhismo
image::pont.jpeg[]


link:../index.html[Voltar]