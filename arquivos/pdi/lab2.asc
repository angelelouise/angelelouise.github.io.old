= Preenchendo regiões
:Author:    Victor Mafra e Angele Louise
:Email:     <angelealst@hotmail.com e vick.vems@gmail.com>
:toc: left

== Q.1
Observando-se o programa labeling.cpp como exemplo, é possível verificar que caso existam mais de 255 objetos na cena, o processo de rotulação poderá ficar comprometido. Identifique a situação em que isso ocorre e proponha uma solução para este problema.

================
    Existem situações em que há similaridade entre as características dos elementos, fator que abre espaço para a catalogação dos mesmos em uma única cor. É o caso do exemplo a seguir, pois a distinção entre os elementos se dá por uma característica(com e sem furo), o que permite agrupar N elementos da imagem em dois grupos distintos, ocupando apenas 2 tons de cinza. 
================

== Q.2
Aprimore o algoritmo de contagem apresentado para identificar regiões com ou sem buracos internos que existam na cena. Assuma que objetos com mais de um buraco podem existir. Inclua suporte no seu algoritmo para não contar bolhas que tocam as bordas da imagem. Não se pode presumir, a priori, que elas tenham buracos ou não.

===============
    Primeiramente há a remoção dos objetos que estão tocando as bordas na etapa 1, visto que suas características são duvidosas devido a incerteza do que há além das bordas.
    Na etapa dois há a mudança da cor de fundo do ponto p(0,0) através do método floodFill, cujos 3 parâmetros são respectivamente: variável da imagem carregada, variável do ponto p e o valor da cor a ser pintado. O novo tom de cinza escolhido foi 1, com a finalidade de evidenciar os buracos nas bolhas que agora estão 1 nível abaixo do tom de cinza do fundo.
    Na etapa três a imagem é percorrida do início ao fim a procura de pixels com tonalidade 0, que correspondem aos buracos nas bolhas. Em caso de sucesso na busca é verificado a cor do pixel prontamente anterior ao buraco, que corresponde a estrutura da bolha. Caso ela possua tonalidade 255, evidencia uma bolha não contada, o método floodFill é utilizado no ponto p da bolha para tonalidade de valor 100(valor escolhido para bolhas com buracos). Caso o valor anterior a um buraco seja de cor diferente de 255 nada é feito, pois corresponde a um n-ezimo buraco de uma bolha já catalogada.
    Na etapa quatro as bolhas sem buraco são catalogadas usando sistema semelhante ao anterior, porém utilizando valor de tom de cinza 200 no floodFill.
===============

== Código 1

[source,cpp]
----------------
#include <iostream>
#include <opencv2/opencv.hpp>

using namespace cv;

int main(int argc, char** argv){
  Mat image, mask;
  int width, height;
  int nobjects, nobjectsB, objcolor, chosenColor;
  
  CvPoint p;
  image = imread(argv[1],CV_LOAD_IMAGE_GRAYSCALE);
  
  if(!image.data){
    std::cout << "imagem nao carregou corretamente\n";
    return(-1);
  }
  width=image.size().width;
  height=image.size().height;

  p.x=0;
  p.y=0;
  
  // --etapa 1-- remove objetos das bordas
  //vascula bordas verticais
    for(int i=0; i<height; i++){
		if(image.at<uchar>(i,0)==255){
			p.x=0;
			p.y=i;
			floodFill(image,p,0);
		}
		
		if(image.at<uchar>(i,width-1)==255){
			p.x=width-1;
			p.y=i;
			floodFill(image,p,0);
		}
	}
	
	//vasculha bordas horizontais
	    for(int j=1; j<width-1; j++){
		if(image.at<uchar>(0,j)==255){
			p.x=j;
			p.y=0;
			floodFill(image,p,0);
		}
		
		if(image.at<uchar>(height-1,j)==255){
			p.x=j;
			p.y=height-1;
			floodFill(image,p,0);
		}
	}
  //FIM--etapa 1-- 
	
  //--etapa 2-- Aplica floodfill no ponto (0,0) e pinta o fundo de tom de cinza 1
  p.x=0;
  p.y=0;
  floodFill(image,p,1);
  //FIM--etapa 2--
	
  //inicializando a contagem
  nobjectsB=0;
  nobjects=0;
  
  //--etapa 3-- busca de bolhas com furos
  objcolor=100;
  for(int i=0; i<height; i++){
    for(int j=0; j<width; j++){
      if(image.at<uchar>(i,j) == 0){
		//caso o pixel possua tom de cinza ==0 é ocorrência de buraco
		if(image.at<uchar>(i,j-1)==255){
			//se o pixel anterior a ocorrência de um buraco for igual a 255
			//significa que a bolha daquele buraco ainda não foi pintada
			//pinta bolha e contabiliza.
			chosenColor=objcolor;
			nobjectsB++;
			p.y=i;
			p.x=j-1;
			floodFill(image,p,chosenColor);
		}
	  }
	}
  }
  //--FIM etapa 3--
  
  //--etapa 4-- busca pelas bolas que sobraram
  objcolor=200;
  for(int i=0; i<height; i++){
    for(int j=0; j<width; j++){
      if(image.at<uchar>(i,j) == 255){
		// achou um objeto
		nobjects++;
		p.x=j;
		p.y=i;
		floodFill(image,p,objcolor);
	  }
	}
  }
  
  std::cout<<"Bolhas inteiras: "<<nobjects<<" bolhas com buracos:"<<nobjectsB<<" total de bolhas:"<<(nobjectsB+nobjects)<<std::endl;
  
  imshow("image", image);
  imwrite("labeling.png", image);
  waitKey();
  return 0;
}
----------------

.Original
image::bolhas.png[]
.Floodfill
image::saidaR4-2.png[]

link:index.html[Voltar]