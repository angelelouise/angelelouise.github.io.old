= Manipulando pixels em uma imagem
:Author:    Victor Mafra e Angele Louise
:Email:     <angelealst@hotmail.com e vick.vems@gmail.com>
:toc: left

== Q.1
Utilizando o programa exemplos/pixels.cpp como referência, implemente um programa regions.cpp. Esse programa deverá solicitar ao usuário as coordenadas de dois pontos P1 e P2 localizados dentro dos limites do tamanho da imagem e exibir que lhe for fornecida. Entretanto, a região definida pelo retângulo de vértices opostos definidos pelos pontos P1 e P2 será exibida com o negativo da imagem na região correspondente. O efeito é ilustrado na Figura Regiões.

===========
    O programa funciona em duas etapas. Na primeira é lançado na tela informações sobre as dimensões da imagem carregada. O usuário deve informar o ponto P1 e P2 dentro das dimensões informadas. O programa verifica o menor valor de x e y entre os pontos para alimentar o teste inicial dos dois for na etapa dois. Já o intervalo dos pontos x e dos pontos y funcionam como limitadores na segunda parte do teste nos for.
    Na segunda etapa os pixels da região de interesse são percorridos e os novos valores correspondem ao módulo do valor anterior menos 255. Dessa forma uma nova tom de cor cinza negativa é criada.
    
    Para compilar: make regions
    Para executar: ./regions <imagem>
===========


== Código 1

[source,cpp]
------
#include <iostream>
#include <opencv2/opencv.hpp>
#include <cmath>

using namespace cv;
using namespace std;

int main(int argc, char** argv){
  Mat image;
  Vec3b val;
  int x1, x2;
  int y1,y2,i,j,limi,limj;

image= imread(argv[1],CV_LOAD_IMAGE_GRAYSCALE);
if(!image.data){
    cout << "nao abriu imagem" << endl;
	return 0;
  }

namedWindow("janela",WINDOW_AUTOSIZE);
//--etapa 1-- pegando parâmetros do retângulo negativo através de P1 e P2
std::cout<<"tamanho máximo em x:"<<image.size().height<<" em y: "<<image.size().width<< std::endl;  
cout <<"Digite P1(x,y): ";
cin >> x1;
cin >> y1;
cout <<"Digite P2(x,y): ";
cin >> x2;
cin >> y2;
//depois de ter entrado com os pontos
if(x1>x2){
	  limi=x1-x2;
	  i=x2;
  }else{
	  limi=x2-x1;
	  i=x1;
  }
  
if(y1>y2){
	  limj=y1-y2;
	  j=y2;
  }else{
	  limj=y2-y1;
	  j=y1;
  }
  //--FIM etapa 1-- 
  
//--etapa 2 -- modificando valores dos pixels na ROI(region of interest)
limj=limj+j;
limi=limi+i;
//iterando
for(int z=i;z<limi;z++){
		for(int n=j;n<limj;n++){
		  image.at<uchar>(z,n)=abs(image.at<uchar>(z,n)-255);
		}
  }
  //--FIM etapa 2--
  
imshow("janela", image);  
waitKey();
return 0;

}

------

.Original
image::pikachu.jpg[]
.Negativo
image::saidaR3-1.png[]

== Q.2

Utilizando o programa exemplos/pixels.cpp como referência, implemente um programa trocaregioes.cpp. Seu programa deverão trocar aleatoriamente regiões da imagem, formando uma espécie de quebra-cabeças. Explore o uso da classe Mat e seus construtores para criar as regiões que serão trocadas. O efeito é ilustrado na Figura Troca de regiões.

================

    O código ficou dividido em duas etapas principais. Inicialmente um array com valores de 1 a 4 é inicializado e randomizado através do random_shuffle, esses valores corresponderão a ordem de escolha dos quadrantes. A imagem original é dividida em 4 partes iguais, cada parte corresponde a uma submatriz, são elas A,B, C e D. A imagem de saída é criada contendo apenas zeros, mas com as dimensões e características da imagem principal através do construtor Mat::zeros(image.size(), image.type());
    Na segunda etapa o programa executa um laço iterado a quantidade de vezes correspondente a número de quadrantes(4). Para melhor entendimento considerar 'i' como variável de iteração e 'a' como array de inteiros(1,2,3 e 4) já randomizado. A cada execução do laço a matriz correspondente ao valor a[i] é colocado na região de interesse da imagem de saída, correspondente ao quadrante i.

    Para compilar: make trocaregioes
    Para executar: ./trocaregioes <imagem>

================

== Código 2

[source,cpp]
-----------
#include <iostream>
#include <cv.h>
#include <highgui.h>
#include <algorithm>    // std::random_shuffle
#include <ctime>        // std::time

using namespace cv;
using namespace std;

//copia submatriz entrada, na matriz de zeros no quadrante 1,2,3,4
void preencheSaida(Mat entrada, Mat &saida, int pos, int width, int height){
		//variável pos corresponde ao quadrante
		switch(pos){
			case 1:
				entrada.copyTo(saida(Rect(width/2, height/2, width/2, height/2)));
			break;
			case 2:
				entrada.copyTo(saida(Rect(0, height/2, width/2, height/2)));
			break;
			case 3:
				entrada.copyTo(saida(Rect(width/2, 0, width/2, height/2)));
			break;
			case 4:
				entrada.copyTo(saida(Rect(0, 0, width/2, height/2)));
			break;
		}
}

int main(int qtdArg, char** args) {
    Mat image,saida;
	int a[4]={1,2,3,4};
    image= imread(args[1], CV_LOAD_IMAGE_COLOR);
	
	if(!image.data){
        cout << "nao abriu a imagem" << endl;
		return 0;
	}
	
	//gera uma nova semente para o random_shuffle
	srand ( unsigned ( time(0) ) );
	//randomiza o array a
	random_shuffle(&a[0], &a[3]);
	
    int width = image.size().width;
    int height = image.size().height;
	
    //--etapa 1-- Construtor usado para copiar uma região de interesse de outra imagem através do rect(ponto x, y, tamanho comp., altura)
    Mat A(image, Rect(0, 0, width/2, height/2));
    Mat B(image, Rect(width/2, 0, width/2, height/2));
    Mat C(image, Rect(0, height/2, width/2, height/2));
    Mat D(image, Rect(width/2, height/2, width/2, height/2));

    //Cria uma matrix de zeros de mesmo tamanho da original
    saida = Mat::zeros(image.size(), image.type());
	//--FIM etapa 1--
	
	//--etapa 2-- Copiando submatrizes para quadrantes da matriz de zeros
	cout << "Ordem: ";
	for(int i=1;i<5;i++){
		//i corresponde ao quadrante da matriz de zeros(esq>dir, cima>baixo)
		//enquanto que o vetor a corresponde a submatriz a ser copiada.
		switch(a[i-1]){
			case 1:
				preencheSaida(A,saida,i, width, height);
				cout << "A ";
			break;
			case 2:
				preencheSaida(B,saida,i,width, height);
				cout << "B " ;
			break;
			case 3:
				preencheSaida(C,saida,i,width, height);
				cout << "C ";
			break;
			case 4:
				preencheSaida(D,saida,i,width, height);
				cout << "D ";
			break;
		}
	}
	//--FIM etapa 2--
	cout<<endl;
    namedWindow("janela", WINDOW_AUTOSIZE);
    imshow("janela", saida);
    waitKey();
    return 0;

}
-----------

.Original
image::gato.jpg[]
.Regiões trocadas
image::saidaR3-2.png[]

link:index.html[Voltar]