= Manipulação de histogramas
:Author:    Victor Mafra e Angele Louise
:Email:     <angelealst@hotmail.com e vick.vems@gmail.com>
:toc: left

== Q.1
Utilizando o programa exemplos/histogram.cpp como referência, implemente um programa equalize.cpp. Este deverá, para cada imagem capturada, realizar a equalização do histogram antes de exibir a imagem. Teste sua implementação apontando a câmera para ambientes com iluminações variadas e observando o efeito gerado.

==============

    Para criar o programa equalize.cpp o programa histogram.cpp foi usado como base. Dessa forma imagens da webcam eram capturadas e exibidas em uma janela, e na janela “equalized image” os frames originais do video eram tratados e exibidos.
    O processo da equalização consistiu em transformar o padrão de cores da imagem capturada de RGB para YCrCb afim de utilizar o método de equalização equalizeHist(planesEq[0], planesEq[0]) oferecido pelo openCv no primeiro plano, que corresponde ao da iluminação. Após isso os planos são fundidos na imagem e a mesma é mostrada.
    As imagens saida R-1.png e saida R-1-1.png mostram respectivamente a imagem tratada de um ambiente bem iluminado e com pouca luz. Pode-se perceber a melhor distribuição dos valores no histograma através da equalização de forma fácil na imagem mais escura, visto que há ocorrência de cores em tons diversos entre os limites mínimos e máximos e não mais uma alta densidade de valores em tons escuros.

    Para compilar: make equalize

    Para executar: ./equalize

==============

== Código 1

[source,cpp]
-------------
#include <iostream>
#include <opencv2/opencv.hpp>

using namespace cv;
using namespace std;

int main(int argc, char** argv){
  Mat image, eqImg;
  int width, height;
  VideoCapture cap;
  vector<Mat> planes, planesEq;
  Mat histR, histG, histB;
  int nbins = 64;
  float range[] = {0, 256};
  const float *histrange = { range };
  bool uniform = true;
  bool acummulate = false;

  cap.open(0);
  
  if(!cap.isOpened()){
    cout << "cameras indisponiveis";
    return -1;
  }
  
  width  = cap.get(CV_CAP_PROP_FRAME_WIDTH);
  height = cap.get(CV_CAP_PROP_FRAME_HEIGHT);
  
  //cap.set(CV_CAP_PROP_POS_FRAMES,100);

  cout << "largura = " << width << endl;
  cout << "altura  = " << height << endl;

  int histw = nbins, histh = nbins/2;
  Mat histImgR(histh, histw, CV_8UC3, Scalar(0,0,0));
  Mat histImgG(histh, histw, CV_8UC3, Scalar(0,0,0));
  Mat histImgB(histh, histw, CV_8UC3, Scalar(0,0,0));

  while(1){
    cap >> image;
	flip(image, image, 1);
	
	//--etapa 1-- cria nova imagem(eqimg), equaliza e exibe
    cvtColor(image, eqImg, CV_BGR2YCrCb); //muda o formato de cor da imagem para YCrCb
    split(eqImg,planesEq); 
    equalizeHist(planesEq[0], planesEq[0]); //equaliza histograma para o primeiro canal Y
    merge(planesEq, eqImg); //junta os planos incluindo o plano equalizado(intensidade de luz)
    cvtColor(eqImg, eqImg, CV_YCrCb2BGR); //modifica o formato de cores para RGB novamente para exibição
    //--FIM etapa1--
	
    split (image, planes);
    calcHist(&planes[0], 1, 0, Mat(), histR, 1,
             &nbins, &histrange,
             uniform, acummulate);


    normalize(histR, histR, 0, histImgR.rows, NORM_MINMAX, -1, Mat());
    histImgR.setTo(Scalar(0));

    
    for(int i=0; i<nbins; i++){
      line(histImgR, Point(i, histh),
           Point(i, cvRound(histR.at<float>(i))),
           Scalar(0, 0, 255), 1, 8, 0);

    }
    histImgR.copyTo(image(Rect(0, 0       ,nbins, histh)));

	
	namedWindow("Original Image", CV_WINDOW_AUTOSIZE);
	namedWindow("Equalized Image", CV_WINDOW_AUTOSIZE);
	
    imshow("Original Image", image);
	imshow("Equalized Image", eqImg);
	
    if(waitKey(30) >= 0) break;
  }
  return 0;
}
-------------

.Ambiente bem iluminado
image::saidaR4-1.png[]
.Ambiente pouco iluminado
image::saidaR4-1-1.png[]

== Q.2

Utilizando o programa exemplos/histogram.cpp como referência, implemente um programa motiondetector.cpp. Este deverá continuamente calcular o histograma da imagem (apenas uma componente de cor é suficiente) e compará-lo com o último histograma calculado. Quando a diferença entre estes ultrapassar um limiar pré-estabelecido, ative um alarme. Utilize uma função de comparação que julgar conveniente.

==============
    O programa motiondetector.cpp foi feito a partir da comparação de histogramas da  componente de cor vermelha de duas imagens. Ao executar o programa o usuário deve pressionar a tecla 'r' para que a referência possa ser capturada(essas ações são feitas na etapa 1). A partir dai o programa abre uma nova janela que mostra imagens em tempo real capturadas pela webcam e passa a analizar seus frames e compará-los à referência(ações de comparação do vídeo em tempo real e referência feitos na etapa 2). 
    O openCV possui uma implementação que é capaz de comparar histogramas. O método responsável é compareHist. Seus parâmetros recebem os histogramas a serem comparados e uma constante que define o método de comparação. O retorno do método é um valor double, cuja interpretação difere para cada tipo de comparação 
    Possíveis métodos de comparação:
[literal]
    - CV_COMP_CORREL Correlation 
    - CV_COMP_CHISQR Chi-Square 
    - CV_COMP_INTERSECT Intersection 
    - CV_COMP_BHATTACHARYYA Bhattacharyya distance

    O método escolhido foi o de correlação, pois é mais fácil entender e utilizar seus resultados, visto que eles variam entre 0 a 1, onde 0 corresponde a nenhuma similaridade entre as imagens e 1 corresponde a perfeita similaridade.
    A tolerância corresponde a variável limite, e pode ser calibrada para identificar diferenças com mais precisão. O valor de tolerância utilizado no experimento foi de  0.995.
    Modificando o cenário(mexendo com o urso ou inserindo novos elementos) os valores de correlação variam e se forem menores que a tolerância o vídeo passa a mostrar a mensagem de alerta “MODIFICAÇÃO VIDEO!!”. Quando o cenário se torna novamente similar à referência o método de comparação de histogramas tende a dar resultados bem próximos de 1, dessa forma a mensagem de alerta é removida da tela.

    Para compilar: make motiondetector

    Para executar: ./motiondetector
==============

== Código 2

[source,cpp]
-------------
#include <iostream>
#include <opencv2/opencv.hpp>

using namespace cv;
using namespace std;

int main(int argc, char** argv){
  Mat image, prevImage;
  int width, height;
  VideoCapture cap;
  vector<Mat> planes;
  Mat histR,prevhistR;
  int nbins = 64;
  float range[] = {0, 256};
  const float *histrange = { range };
  bool uniform = true;
  bool acummulate = false;
  char str[200],key;;
  bool isPrevious=false;
  bool capturedRef=false;
  float limite=0.995;

  cap.open(0);
  
  if(!cap.isOpened()){
    cout << "cameras indisponiveis";
    return -1;
  }
  
  width  = cap.get(CV_CAP_PROP_FRAME_WIDTH);
  height = cap.get(CV_CAP_PROP_FRAME_HEIGHT);

  cout << "largura = " << width << endl;
  cout << "altura  = " << height << endl;
 
  int histw = nbins, histh = nbins/2;
  Mat histImgR(histh, histw, CV_8UC3, Scalar(0,0,0));
  while(1){
    cap >> image;
	flip(image, image, 1);
	split (image, planes);
	//--etapa 2-- caso exista uma imagem de referência fica fazendo a comparação entre histogramas
   if(isPrevious){ 
		split (image, planes);
    calcHist(&planes[0], 1, 0, Mat(), histR, 1,
             &nbins, &histrange,
             uniform, acummulate);
    normalize(histR, histR, 0, histImgR.rows, NORM_MINMAX, -1, Mat());
    histImgR.setTo(Scalar(0));
    
    for(int i=0; i<nbins; i++){
      line(histImgR, Point(i, histh),
           Point(i, cvRound(histR.at<float>(i))),
           Scalar(0, 0, 255), 1, 8, 0);

    }
    histImgR.copyTo(image(Rect(0, 0       ,nbins, histh)));
	  
		namedWindow("Original Image", CV_WINDOW_AUTOSIZE);
		
		//método de avaliação entre os histogramas
		double correlation=compareHist( histR, prevhistR, CV_COMP_CORREL);
		
		sprintf(str,"%lf  Correlation",correlation);
		//método para inserir string na imagem
		putText(image, str, cvPoint(120,30), 
		FONT_HERSHEY_COMPLEX_SMALL, 0.8, cvScalar(200,200,250), 1, CV_AA);
		if(correlation<limite){
			//caso seja menor que o valor estabelecido como limite
			//gera aviso na tela de alteração entre as duas imagens
			putText(image, "ALTERACAO VIDEO!!", cvPoint(120,45), 
			FONT_HERSHEY_COMPLEX_SMALL, 0.8, cvScalar(0,0,250), 1, CV_AA);
		}
		
		prevImage=image;
		
		imshow("Live Image", image);
	//--FIM etapa 2--
	//--etapa 1-- ao executar captura um frame do vídeo que servirá como referância para comparações
	}else{
	//calcula histograma para camada vermelha
    calcHist(&planes[0], 1, 0, Mat(), prevhistR, 1,
             &nbins, &histrange,
             uniform, acummulate);
	
	//normaliza o histograma para o tamanho da ROI que mostrará o hist na imagem
    normalize(prevhistR, prevhistR, 0, histImgR.rows, NORM_MINMAX, -1, Mat());
    histImgR.setTo(Scalar(0));

    for(int i=0; i<nbins; i++){
      line(histImgR, Point(i, histh),
           Point(i, cvRound(prevhistR.at<float>(i))),
           Scalar(0, 0, 255), 1, 8, 0);

    }
	prevImage=image;
    histImgR.copyTo(image(Rect(0, 0       ,nbins, histh)));
		if(capturedRef){
			isPrevious=true;
			putText(image, "REFERENCIA", cvPoint(120,30), 
			FONT_HERSHEY_COMPLEX_SMALL, 0.8, cvScalar(0,0,250), 1, CV_AA);
		}
		namedWindow("Imagem Ref", CV_WINDOW_AUTOSIZE);
		imshow("Imagem Ref", image);
		
	}
	//--FIM etapa1--
	
    key = (char) waitKey(10);
    if( key == 27 ) break; // esc pressed!
    switch(key){
    case 'r':
	  capturedRef=true;
      break;
	}
  }
  return 0;
}
-------------
.Motion detector
image::motiondetector.gif[]

link:index.html[Voltar]