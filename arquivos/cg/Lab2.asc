= Laboratório 2
:Author:    Angele Louise
:Email:     <angelealst@hotmail.com>
:toc: left

== Exercício 1

Utilizando o programa linha.c como referência, implemente um programa quadrado.c.
Este programa deverá desenhar numa janela com fundo branco, de dimensões 256x256 pixels, um quadrado vermelho, com vértice superior esquerdo de coordenadas (x, y)= (30, 226) e vértice inferior direito de coordenadas (x, y) = (226, 30). 
Quando a tecla a (keycode=97) for pressionada, o quadrado deverá ficar com a cor azul. 
Quando a tecla v (keycode=118) for pressionada, o quadrado deverá voltar à cor vermelha.

=== Código 1

[source,cpp]
--------------------
#include <GL/glut.h>
#include <stdlib.h>

void init(void);
void display(void);
void keyboard(unsigned char key, int x, int y);
GLfloat r=1,g=0,b=0;
int main(int argc, char** argv){
  glutInit(&argc, argv);
  glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
  glutInitWindowSize (256, 256); 
  glutInitWindowPosition (100, 100); 
  glutCreateWindow ("Desenhando uma linha");
  init();
  glutDisplayFunc(display); 
  glutKeyboardFunc(keyboard);
  glutMainLoop();
  return 0;
}

void init(void){
  glClearColor(1.0, 1.0, 1.0, 1.0);
  glOrtho (0, 256, 0, 256, -1 ,1);
}

void display(void){
  int i;
  glClear(GL_COLOR_BUFFER_BIT);
  glColor3f (r, g, b);
  glBegin(GL_LINES);
  glLineWidth(3.0);
  glVertex2i(30,226);glVertex2i (226,226);  
  glVertex2i(226,30); glVertex2i(30,30); 
  glVertex2i(226,30);glVertex2i (226,226); 
  glVertex2i(30,30);glVertex2i(30,226);
  glEnd();
  glFlush();
}

void keyboard(unsigned char key, int x, int y){
  switch (key) {
  case 27:
	exit(0);
	break;
  case 97:
     r=0,g=0,b=1;
	 glutPostRedisplay();
	 break;
  case 118:
	 r=1,g=0,b=0;
	 glutPostRedisplay();
	 break;
  }
}
--------------------

.Resultados
image::quadrado1.png[]
.Resultados
image::quadrado2.png[]

== Exercício 2

Implemente o algoritmo de Bresenham para traçado de linhas, utilizando GL_POINTS como parâmetro da função glBegin(). 
Este parâmetro indica que cada vértice deve ser tratado como um ponto simples.
Utilizando o algoritmo implementado, desenhe uma reta verde do ponto (x, y)=(40, 200) ao ponto (x, y)=(200, 10).

=== Código 2

[source,cpp]
---------------------------------
#include <GL/glut.h>
#include <stdlib.h>
#include<stdio.h>
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<ctype.h>
#include<signal.h>

void init(void);
void setPixel(int,int);
void keyboard(unsigned char key, int x, int y);
void display(void);
GLfloat r=0,g=1,b=0;
int main(int argc, char** argv){
  glutInit(&argc, argv);
  glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
  glutInitWindowSize (256, 256); 
  glutInitWindowPosition (100, 100); 
  glutCreateWindow ("Desenhando uma linha");
  init();
  glutDisplayFunc(display);
  glutKeyboardFunc(keyboard);
  glutMainLoop();
  return 0;
}

void init(void){
  glClearColor(1.0, 1.0, 1.0, 1.0);
  glOrtho (0, 256, 0, 256, -1 ,1);
}

void display(){
  glClear(GL_COLOR_BUFFER_BIT);
  glColor3f (r, g, b);
  int x1=40,x2=100,y1=200,y2=10,x,y;
  int dx, dy, pk,troca,s1=1,s2=1;
  x=x1;
  y=y1;
  dx = abs(x2-x1);
  dy = abs(y2-y1);
  if(x2-x1<0){
    s1=-1;
  }
  if(y2-y1<0){
    s2=-1;
  }
  if(dy>dx){
    float temp;
    temp = dx;
    dx = dy;
    dy = temp;
    troca=1;
  }
  else{
    troca=0;
  }    
  pk=2*dy-dx;
  int i;
  for(i=1; i<=dx; i++){
  setPixel(x, y); 
    while(pk>=0){
      if(troca==1){
        x=x+s1;
	  }
	  else{
   		y=y+s2;
	  }
      pk=pk-2*dx;
	}
    if(troca==1){
        y=y+s2;
	  }
	  else{
   	    x=x+s1;
	  }
    pk=pk+2*dy;
  }
  glFlush();
}
void setPixel(int x,int y){
  glBegin(GL_POINTS);
  glVertex2i(x,y);
  glEnd();

}

void keyboard(unsigned char key, int x, int y){
  switch (key) {
  case 27:
	exit(0);
	break;
  case 97:
     r=0,g=0,b=1;
	   glutPostRedisplay();
	   break;
  case 118:
	   r=1,g=0,b=0;
	   glutPostRedisplay();
	   break;
  }
}
---------------------------------

.Resultados
image::brelinha.png[]

== Exercício 3

Implemente o algoritmo de Bresenham para traçado de circunferências, utilizando GL_POINTS como parâmetro da função glBegin().
Utilizando o algoritmo implementado, desenhe uma circunferência azul de raio r=50, centrada no ponto (x, y) = (128, 128).

=== Código 3

[source,cpp]
----------------
#include <GL/glut.h>
#include <stdlib.h>
#include<stdio.h>
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<ctype.h>
#include<signal.h>

void init(void);
void setPixel(int,int);
void keyboard(unsigned char key, int x, int y);
void display(void);
GLfloat r=0,g=0,b=1;
int main(int argc, char** argv){
  glutInit(&argc, argv);
  glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
  glutInitWindowSize (256, 256); 
  glutInitWindowPosition (100, 100); 
  glutCreateWindow ("Desenhando uma linha");
  init();
  glutDisplayFunc(display);
  glutKeyboardFunc(keyboard);
  glutMainLoop();
  return 0;
}

void init(void){
  glClearColor(1.0, 1.0, 1.0, 1.0);
  glOrtho (0, 256, 0, 256, -1 ,1);
}

void display(){
	glClear(GL_COLOR_BUFFER_BIT);
  	glColor3f (r, g, b);
	int x0=128,y0=128,raio=50;
	int d = 1 - raio;
    int ddF_x = 0;
    int ddF_y = -2 * raio;
    int x = 0;
    int y = raio;
	setPixel(x0,y0+raio);
	setPixel(x0,y0-raio);
	setPixel(x0+raio,y0);
	setPixel(x0-raio,y0);
    while(y>x){
		if(d<0){
			d = d + 2*x + 3;
     		x = x + 1;
		}
		else{
        	d = d + 2*(x-y) + 5;
     		x = x + 1;
     		y = y - 1;
		}
	    setPixel(x0 + x, y0 + y);
		setPixel(x0 - x, y0 + y);
		setPixel(x0 + x, y0 - y);
		setPixel(x0 - x, y0 - y);
		setPixel(x0 + y, y0 + x);
		setPixel(x0 - y, y0 + x);
		setPixel(x0 + y, y0 - x);
		setPixel(x0 - y, y0 - x);
	}

	  glFlush();
}
void setPixel(int x,int y){
  glBegin(GL_POINTS);
  glVertex2i(x,y);
  glEnd();

}

void keyboard(unsigned char key, int x, int y){
  switch (key) {
  case 27:
	exit(0);
	break;
  case 97:
     r=0,g=0,b=1;
	 glutPostRedisplay();
	 break;
  case 118:
	 r=1,g=0,b=0;
	 glutPostRedisplay();
	 break;
  }
}
----------------

.Resultados
image::brecirc.png[]
